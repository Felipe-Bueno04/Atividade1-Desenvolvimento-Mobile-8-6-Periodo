{"ast":null,"code":"'use strict';\nexport function isWorkletFunction(value) {\n  'worklet';\n  return (typeof value === 'function' && !!value.__workletHash\n  );\n}","map":{"version":3,"names":["isWorkletFunction","value","__workletHash"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-worklets\\src\\workletFunction.ts"],"sourcesContent":["'use strict';\n\nimport type { WorkletFunction } from './workletTypes';\n\n/**\n * This function allows you to determine if a given function is a worklet. It\n * only works with Reanimated Babel plugin enabled. Unless you are doing\n * something with internals of Reanimated you shouldn't need to use this\n * function.\n *\n * ### Note\n *\n * Do not call it before the worklet is declared, as it will always return false\n * then. E.g.:\n *\n * ```ts\n * isWorkletFunction(myWorklet); // Will always return false.\n *\n * function myWorklet() {\n *   'worklet';\n * }\n * ```\n *\n * ### Maintainer note\n *\n * This function is supposed to be used only in the React Runtime. It always\n * returns `false` in Worklet Runtimes.\n */\nexport function isWorkletFunction<\n  Args extends unknown[] = unknown[],\n  ReturnValue = unknown,\n>(value: unknown): value is WorkletFunction<Args, ReturnValue> {\n  'worklet';\n  // Since host objects always return true for `in` operator, we have to use dot notation to check if the property exists.\n  // See https://github.com/facebook/hermes/blob/340726ef8cf666a7cce75bc60b02fa56b3e54560/lib/VM/JSObject.cpp#L1276.\n\n  return (\n    // `__workletHash` isn't extracted in Worklet Runtimes.\n    typeof value === 'function' &&\n    !!(value as unknown as Record<string, unknown>).__workletHash\n  );\n}\n"],"mappings":"AAAA,YAAY;AA4BZ,OAAO,SAASA,iBAAiBA,CAG/BC,KAAc,EAA+C;EAC7D,SAAS;EAIT,QAEE,OAAOA,KAAK,KAAK,UAAU,IAC3B,CAAC,CAAEA,KAAK,CAAwCC;EAAA;AAEpD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
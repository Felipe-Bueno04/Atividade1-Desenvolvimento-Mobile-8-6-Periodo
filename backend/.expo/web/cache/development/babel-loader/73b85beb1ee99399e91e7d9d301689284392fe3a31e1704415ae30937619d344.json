{"ast":null,"code":"'use strict';\n'worklet';\n\nimport { ColorProperties, processColorInitially } from \"../../Colors\";\nimport { IS_ANDROID } from \"../constants\";\nexport function processColor(color) {\n  var normalizedColor = processColorInitially(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n  if (IS_ANDROID) {\n    normalizedColor = normalizedColor | 0x0;\n  }\n  return normalizedColor;\n}\nexport function processColorsInProps(props) {\n  for (var key in props) {\n    if (ColorProperties.includes(key)) {\n      if (Array.isArray(props[key])) {\n        props[key] = props[key].map(function (color) {\n          return processColor(color);\n        });\n      } else {\n        props[key] = processColor(props[key]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["ColorProperties","processColorInitially","IS_ANDROID","processColor","color","normalizedColor","undefined","processColorsInProps","props","key","includes","Array","isArray","map"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-reanimated\\src\\common\\processors\\colors.ts"],"sourcesContent":["'use strict';\n'worklet';\nimport { ColorProperties, processColorInitially } from '../../Colors';\nimport type { StyleProps } from '../../commonTypes';\nimport { IS_ANDROID } from '../constants';\n\nexport function processColor(color: unknown): number | null | undefined {\n  let normalizedColor = processColorInitially(color);\n  if (normalizedColor === null || normalizedColor === undefined) {\n    return undefined;\n  }\n\n  if (typeof normalizedColor !== 'number') {\n    return null;\n  }\n\n  if (IS_ANDROID) {\n    // Android use 32 bit *signed* integer to represent the color\n    // We utilize the fact that bitwise operations in JS also operates on\n    // signed 32 bit integers, so that we can use those to convert from\n    // *unsigned* to *signed* 32bit int that way.\n    normalizedColor = normalizedColor | 0x0;\n  }\n\n  return normalizedColor;\n}\n\nexport function processColorsInProps(props: StyleProps) {\n  for (const key in props) {\n    if (ColorProperties.includes(key)) {\n      if (Array.isArray(props[key])) {\n        props[key] = props[key].map((color: unknown) => processColor(color));\n      } else {\n        props[key] = processColor(props[key]);\n      }\n    }\n  }\n}\n"],"mappings":"AAAA,YAAY;AACZ,SAAS;;AACT,SAASA,eAAe,EAAEC,qBAAqB;AAE/C,SAASC,UAAU;AAEnB,OAAO,SAASC,YAAYA,CAACC,KAAc,EAA6B;EACtE,IAAIC,eAAe,GAAGJ,qBAAqB,CAACG,KAAK,CAAC;EAClD,IAAIC,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAKC,SAAS,EAAE;IAC7D,OAAOA,SAAS;EAClB;EAEA,IAAI,OAAOD,eAAe,KAAK,QAAQ,EAAE;IACvC,OAAO,IAAI;EACb;EAEA,IAAIH,UAAU,EAAE;IAKdG,eAAe,GAAGA,eAAe,GAAG,GAAG;EACzC;EAEA,OAAOA,eAAe;AACxB;AAEA,OAAO,SAASE,oBAAoBA,CAACC,KAAiB,EAAE;EACtD,KAAK,IAAMC,GAAG,IAAID,KAAK,EAAE;IACvB,IAAIR,eAAe,CAACU,QAAQ,CAACD,GAAG,CAAC,EAAE;MACjC,IAAIE,KAAK,CAACC,OAAO,CAACJ,KAAK,CAACC,GAAG,CAAC,CAAC,EAAE;QAC7BD,KAAK,CAACC,GAAG,CAAC,GAAGD,KAAK,CAACC,GAAG,CAAC,CAACI,GAAG,CAAE,UAAAT,KAAc;UAAA,OAAKD,YAAY,CAACC,KAAK,CAAC;QAAA,EAAC;MACtE,CAAC,MAAM;QACLI,KAAK,CAACC,GAAG,CAAC,GAAGN,YAAY,CAACK,KAAK,CAACC,GAAG,CAAC,CAAC;MACvC;IACF;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
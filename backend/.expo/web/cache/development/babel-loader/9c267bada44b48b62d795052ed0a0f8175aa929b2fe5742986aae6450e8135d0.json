{"ast":null,"code":"'use strict';\n'worklet';\n\nimport { isLength } from \"../utils/guards\";\nvar LENGTH_MAPPINGS = ['offsetX', 'offsetY', 'blurRadius', 'spreadDistance'];\nvar SHADOW_PARTS_REGEX = /(?:[^\\s()]+|\\([^()]*\\))+/g;\nvar SHADOW_SPLIT_REGEX = /(?:[^,()]+|\\([^)]*\\))+(?=\\s*,|$)/g;\nexport function parseBoxShadowString(value) {\n  if (value === 'none') {\n    return [];\n  }\n  var shadows = value.match(SHADOW_SPLIT_REGEX) || [];\n  return shadows.map(function (shadow) {\n    var result = {\n      offsetX: 0,\n      offsetY: 0\n    };\n    var foundLengthsCount = 0;\n    var parts = shadow.match(SHADOW_PARTS_REGEX) || [];\n    parts.forEach(function (part) {\n      if (isLength(part)) {\n        result[LENGTH_MAPPINGS[foundLengthsCount++]] = part;\n      } else if (part === 'inset') {\n        result.inset = true;\n      } else {\n        result.color = part.trim();\n      }\n    });\n    return result;\n  });\n}","map":{"version":3,"names":["isLength","LENGTH_MAPPINGS","SHADOW_PARTS_REGEX","SHADOW_SPLIT_REGEX","parseBoxShadowString","value","shadows","match","map","shadow","result","offsetX","offsetY","foundLengthsCount","parts","forEach","part","inset","color","trim"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-reanimated\\src\\common\\utils\\parsers.ts"],"sourcesContent":["'use strict';\n'worklet';\nimport type { BoxShadowValue } from 'react-native';\n\nimport { isLength } from '../utils/guards';\n\nconst LENGTH_MAPPINGS = [\n  'offsetX',\n  'offsetY',\n  'blurRadius',\n  'spreadDistance',\n] as const;\n\nconst SHADOW_PARTS_REGEX = /(?:[^\\s()]+|\\([^()]*\\))+/g;\nconst SHADOW_SPLIT_REGEX = /(?:[^,()]+|\\([^)]*\\))+(?=\\s*,|$)/g;\n\nexport function parseBoxShadowString(value: string) {\n  if (value === 'none') {\n    return [];\n  }\n\n  const shadows = value.match(SHADOW_SPLIT_REGEX) || [];\n\n  return shadows.map<BoxShadowValue>((shadow) => {\n    const result: BoxShadowValue = {\n      offsetX: 0,\n      offsetY: 0,\n    };\n\n    let foundLengthsCount = 0;\n    const parts = shadow.match(SHADOW_PARTS_REGEX) || [];\n\n    parts.forEach((part) => {\n      if (isLength(part)) {\n        result[LENGTH_MAPPINGS[foundLengthsCount++]] = part;\n      } else if (part === 'inset') {\n        result.inset = true;\n      } else {\n        result.color = part.trim();\n      }\n    });\n\n    return result;\n  });\n}\n"],"mappings":"AAAA,YAAY;AACZ,SAAS;;AAGT,SAASA,QAAQ;AAEjB,IAAMC,eAAe,GAAG,CACtB,SAAS,EACT,SAAS,EACT,YAAY,EACZ,gBAAgB,CACR;AAEV,IAAMC,kBAAkB,GAAG,2BAA2B;AACtD,IAAMC,kBAAkB,GAAG,mCAAmC;AAE9D,OAAO,SAASC,oBAAoBA,CAACC,KAAa,EAAE;EAClD,IAAIA,KAAK,KAAK,MAAM,EAAE;IACpB,OAAO,EAAE;EACX;EAEA,IAAMC,OAAO,GAAGD,KAAK,CAACE,KAAK,CAACJ,kBAAkB,CAAC,IAAI,EAAE;EAErD,OAAOG,OAAO,CAACE,GAAG,CAAkB,UAAAC,MAAM,EAAK;IAC7C,IAAMC,MAAsB,GAAG;MAC7BC,OAAO,EAAE,CAAC;MACVC,OAAO,EAAE;IACX,CAAC;IAED,IAAIC,iBAAiB,GAAG,CAAC;IACzB,IAAMC,KAAK,GAAGL,MAAM,CAACF,KAAK,CAACL,kBAAkB,CAAC,IAAI,EAAE;IAEpDY,KAAK,CAACC,OAAO,CAAE,UAAAC,IAAI,EAAK;MACtB,IAAIhB,QAAQ,CAACgB,IAAI,CAAC,EAAE;QAClBN,MAAM,CAACT,eAAe,CAACY,iBAAiB,EAAE,CAAC,CAAC,GAAGG,IAAI;MACrD,CAAC,MAAM,IAAIA,IAAI,KAAK,OAAO,EAAE;QAC3BN,MAAM,CAACO,KAAK,GAAG,IAAI;MACrB,CAAC,MAAM;QACLP,MAAM,CAACQ,KAAK,GAAGF,IAAI,CAACG,IAAI,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC;IAEF,OAAOT,MAAM;EACf,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"'use strict';\n'worklet';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"color\", \"offsetX\", \"offsetY\", \"spreadDistance\", \"blurRadius\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { IS_ANDROID } from \"../constants\";\nimport { ReanimatedError } from \"../errors\";\nimport { maybeAddSuffix, parseBoxShadowString } from \"../utils\";\nimport { processColor } from \"./colors\";\nvar ERROR_MESSAGES = {\n  notArrayObject: function notArrayObject(value) {\n    return `Box shadow value must be a string or an array of shadow objects (e.g. [{ offsetX, offsetY, color }]). Received: ${JSON.stringify(value)}.`;\n  },\n  invalidColor: function invalidColor(color, boxShadow) {\n    return `Invalid color \"${color}\" in box shadow \"${boxShadow}\".`;\n  }\n};\nvar parseBlurRadius = function parseBlurRadius(value) {\n  if (IS_ANDROID) {\n    return Math.max(parseFloat(value), 1);\n  }\n  return parseFloat(value);\n};\nexport var processBoxShadowNative = function processBoxShadowNative(value) {\n  if (value === 'none') {\n    return;\n  }\n  var parsedShadow = typeof value === 'string' ? parseBoxShadowString(value) : value;\n  if (!Array.isArray(parsedShadow)) {\n    throw new ReanimatedError(ERROR_MESSAGES.notArrayObject(parsedShadow));\n  }\n  return parsedShadow.map(function (shadow) {\n    var _shadow$color = shadow.color,\n      color = _shadow$color === void 0 ? '#000' : _shadow$color,\n      _shadow$offsetX = shadow.offsetX,\n      offsetX = _shadow$offsetX === void 0 ? 0 : _shadow$offsetX,\n      _shadow$offsetY = shadow.offsetY,\n      offsetY = _shadow$offsetY === void 0 ? 0 : _shadow$offsetY,\n      _shadow$spreadDistanc = shadow.spreadDistance,\n      spreadDistance = _shadow$spreadDistanc === void 0 ? 0 : _shadow$spreadDistanc,\n      _shadow$blurRadius = shadow.blurRadius,\n      blurRadius = _shadow$blurRadius === void 0 ? 0 : _shadow$blurRadius,\n      rest = _objectWithoutProperties(shadow, _excluded);\n    var processedColor = processColor(color);\n    if (processedColor === null) {\n      throw new ReanimatedError(ERROR_MESSAGES.invalidColor(color, JSON.stringify(shadow)));\n    }\n    return _objectSpread(_objectSpread({}, rest), {}, {\n      blurRadius: parseBlurRadius(blurRadius),\n      color: processedColor,\n      offsetX: parseFloat(offsetX),\n      offsetY: parseFloat(offsetY),\n      spreadDistance: parseFloat(spreadDistance)\n    });\n  });\n};\nexport var processBoxShadowWeb = function processBoxShadowWeb(value) {\n  var parsedShadow = typeof value === 'string' ? parseBoxShadowString(value) : value;\n  return parsedShadow.map(function (_ref) {\n    var offsetX = _ref.offsetX,\n      offsetY = _ref.offsetY,\n      _ref$color = _ref.color,\n      color = _ref$color === void 0 ? '#000' : _ref$color,\n      _ref$blurRadius = _ref.blurRadius,\n      blurRadius = _ref$blurRadius === void 0 ? '' : _ref$blurRadius,\n      _ref$spreadDistance = _ref.spreadDistance,\n      spreadDistance = _ref$spreadDistance === void 0 ? '' : _ref$spreadDistance,\n      _ref$inset = _ref.inset,\n      inset = _ref$inset === void 0 ? '' : _ref$inset;\n    return [maybeAddSuffix(offsetX, 'px'), maybeAddSuffix(offsetY, 'px'), maybeAddSuffix(blurRadius, 'px'), maybeAddSuffix(spreadDistance, 'px'), color, inset ? 'inset' : ''].filter(Boolean).join(' ');\n  }).join(', ');\n};","map":{"version":3,"names":["_defineProperty","_objectWithoutProperties","_excluded","ownKeys","e","r","t","Object","keys","getOwnPropertySymbols","o","filter","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","arguments","length","forEach","getOwnPropertyDescriptors","defineProperties","defineProperty","IS_ANDROID","ReanimatedError","maybeAddSuffix","parseBoxShadowString","processColor","ERROR_MESSAGES","notArrayObject","value","JSON","stringify","invalidColor","color","boxShadow","parseBlurRadius","Math","max","parseFloat","processBoxShadowNative","parsedShadow","Array","isArray","map","shadow","_shadow$color","_shadow$offsetX","offsetX","_shadow$offsetY","offsetY","_shadow$spreadDistanc","spreadDistance","_shadow$blurRadius","blurRadius","rest","processedColor","processBoxShadowWeb","_ref","_ref$color","_ref$blurRadius","_ref$spreadDistance","_ref$inset","inset","Boolean","join"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-reanimated\\src\\common\\processors\\shadows.ts"],"sourcesContent":["'use strict';\n'worklet';\nimport type { BoxShadowValue } from 'react-native';\n\nimport { IS_ANDROID } from '../constants';\nimport { ReanimatedError } from '../errors';\nimport type { ValueProcessor } from '../types';\nimport { maybeAddSuffix, parseBoxShadowString } from '../utils';\nimport { processColor } from './colors';\n\nconst ERROR_MESSAGES = {\n  notArrayObject: (value: object) =>\n    `Box shadow value must be a string or an array of shadow objects (e.g. [{ offsetX, offsetY, color }]). Received: ${JSON.stringify(value)}.`,\n\n  invalidColor: (color: string, boxShadow: string) =>\n    `Invalid color \"${color}\" in box shadow \"${boxShadow}\".`,\n};\n\nexport type ProcessedBoxShadowValue = {\n  offsetX: number;\n  offsetY: number;\n  blurRadius?: number;\n  color?: number;\n  spreadDistance?: number;\n  inset?: boolean;\n};\n\nconst parseBlurRadius = (value: string) => {\n  if (IS_ANDROID) {\n    // Android crashes when blurRadius is smaller than 1\n    return Math.max(parseFloat(value), 1);\n  }\n  return parseFloat(value);\n};\n\nexport const processBoxShadowNative: ValueProcessor<\n  ReadonlyArray<BoxShadowValue> | string,\n  ProcessedBoxShadowValue[]\n> = (value) => {\n  if (value === 'none') {\n    return;\n  }\n\n  const parsedShadow =\n    typeof value === 'string' ? parseBoxShadowString(value) : value;\n\n  if (!Array.isArray(parsedShadow)) {\n    throw new ReanimatedError(ERROR_MESSAGES.notArrayObject(parsedShadow));\n  }\n\n  return parsedShadow.map<ProcessedBoxShadowValue>((shadow) => {\n    const {\n      color = '#000',\n      offsetX = 0,\n      offsetY = 0,\n      spreadDistance = 0,\n      blurRadius = 0,\n      ...rest\n    } = shadow;\n    const processedColor = processColor(color);\n\n    if (processedColor === null) {\n      throw new ReanimatedError(\n        ERROR_MESSAGES.invalidColor(color, JSON.stringify(shadow))\n      );\n    }\n\n    return {\n      ...rest,\n      blurRadius: parseBlurRadius(blurRadius as string),\n      color: processedColor,\n      offsetX: parseFloat(offsetX as string),\n      offsetY: parseFloat(offsetY as string),\n      spreadDistance: parseFloat(spreadDistance as string),\n    };\n  });\n};\n\nexport const processBoxShadowWeb: ValueProcessor<\n  string | ReadonlyArray<BoxShadowValue>,\n  string\n> = (value) => {\n  const parsedShadow =\n    typeof value === 'string' ? parseBoxShadowString(value) : value;\n\n  return parsedShadow\n    .map(\n      ({\n        offsetX,\n        offsetY,\n        color = '#000',\n        blurRadius = '',\n        spreadDistance = '',\n        inset = '',\n      }) =>\n        [\n          maybeAddSuffix(offsetX, 'px'),\n          maybeAddSuffix(offsetY, 'px'),\n          maybeAddSuffix(blurRadius, 'px'),\n          maybeAddSuffix(spreadDistance, 'px'),\n          color,\n          inset ? 'inset' : '',\n        ]\n          .filter(Boolean)\n          .join(' ')\n    )\n    .join(', ');\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
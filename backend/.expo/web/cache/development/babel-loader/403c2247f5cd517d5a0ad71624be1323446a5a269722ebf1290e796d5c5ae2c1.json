{"ast":null,"code":"'use strict';\n\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nimport { hasSuffix } from \"../../../common\";\nimport { hasProp, isConfigPropertyAlias, isDefined, isRecord, kebabizeCamelCase } from \"../../utils\";\nvar hasValueProcessor = function hasValueProcessor(configValue) {\n  return typeof configValue === 'object' && configValue !== null && 'process' in configValue;\n};\nvar BuilderBase = function () {\n  function BuilderBase(config) {\n    _classCallCheck(this, BuilderBase);\n    this.processedProps = {};\n    this.config = config;\n  }\n  return _createClass(BuilderBase, [{\n    key: \"add\",\n    value: function add(property, value) {\n      var configValue = this.config[property];\n      if (!configValue || !isDefined(value) || configValue === false) {\n        return;\n      }\n      if (configValue === true) {\n        this.maybeAssignProp(property, String(value));\n      } else if (typeof configValue === 'string') {\n        this.maybeAssignProp(property, hasSuffix(value) ? value : `${String(value)}${configValue}`);\n      } else if (isConfigPropertyAlias(configValue)) {\n        this.add(configValue.as, value);\n      } else {\n        this.customProcess(property, value);\n      }\n    }\n  }, {\n    key: \"maybeAssignProp\",\n    value: function maybeAssignProp(property, value) {\n      this.processedProps[property] ??= value;\n    }\n  }, {\n    key: \"maybeAssignProps\",\n    value: function maybeAssignProps(properties) {\n      var _this = this;\n      Object.entries(properties).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          value = _ref2[1];\n        return _this.maybeAssignProp(key, value);\n      });\n    }\n  }, {\n    key: \"handleProcess\",\n    value: function handleProcess(property, value, process) {\n      var processedValue = process ? process(value) : String(value);\n      if (!isDefined(processedValue)) {\n        return;\n      }\n      if (isRecord(processedValue)) {\n        this.maybeAssignProps(processedValue);\n      } else {\n        this.maybeAssignProp(property, processedValue);\n      }\n    }\n  }]);\n}();\nvar StyleBuilderImpl = function (_BuilderBase2) {\n  function StyleBuilderImpl(config, buildHandler) {\n    var _this2;\n    _classCallCheck(this, StyleBuilderImpl);\n    _this2 = _callSuper(this, StyleBuilderImpl, [config]);\n    _this2.ruleBuildersSet = new Set();\n    _this2.nameAliases = {};\n    _this2.buildHandler = buildHandler;\n    return _this2;\n  }\n  _inherits(StyleBuilderImpl, _BuilderBase2);\n  return _createClass(StyleBuilderImpl, [{\n    key: \"buildFrom\",\n    value: function buildFrom(props) {\n      var _this3 = this;\n      Object.entries(props).forEach(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n          key = _ref4[0],\n          value = _ref4[1];\n        return _this3.add(key, value);\n      });\n      return this.build();\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      this.buildRuleBuilders();\n      var result = this.buildHandler(this.processedProps, this.nameAliases);\n      this.cleanup();\n      return result;\n    }\n  }, {\n    key: \"customProcess\",\n    value: function customProcess(property, value) {\n      var configValue = this.config[property];\n      if (typeof configValue !== 'object') {\n        return;\n      }\n      if (isRuleBuilder(configValue)) {\n        this.ruleBuildersSet.add(configValue);\n        configValue.add(property, value);\n      } else {\n        if (hasValueProcessor(configValue)) {\n          this.handleProcess(property, value, configValue.process);\n        } else {\n          this.maybeAssignProp(property, String(value));\n        }\n        if (hasProp(configValue, 'name')) {\n          this.nameAliases[property] = configValue.name;\n        }\n      }\n    }\n  }, {\n    key: \"buildRuleBuilders\",\n    value: function buildRuleBuilders() {\n      var _this4 = this;\n      this.ruleBuildersSet.forEach(function (builder) {\n        return _this4.maybeAssignProps(builder.build());\n      });\n      this.ruleBuildersSet.clear();\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.processedProps = {};\n      this.nameAliases = {};\n    }\n  }]);\n}(BuilderBase);\nvar RuleBuilderImpl = function (_BuilderBase3) {\n  function RuleBuilderImpl(config, buildHandler) {\n    var _this5;\n    _classCallCheck(this, RuleBuilderImpl);\n    _this5 = _callSuper(this, RuleBuilderImpl, [config]);\n    _this5.buildHandler = buildHandler;\n    return _this5;\n  }\n  _inherits(RuleBuilderImpl, _BuilderBase3);\n  return _createClass(RuleBuilderImpl, [{\n    key: \"build\",\n    value: function build() {\n      var result = this.buildHandler(this.processedProps);\n      this.cleanup();\n      return result;\n    }\n  }, {\n    key: \"customProcess\",\n    value: function customProcess(property, value) {\n      var configValue = this.config[property];\n      if (hasValueProcessor(configValue)) {\n        this.handleProcess(property, value, configValue.process);\n      }\n    }\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      this.processedProps = {};\n    }\n  }]);\n}(BuilderBase);\nvar isRuleBuilder = function isRuleBuilder(value) {\n  return value instanceof RuleBuilderImpl;\n};\nvar defaultStyleBuildHandler = function defaultStyleBuildHandler(props, nameAliases) {\n  var entries = Object.entries(props);\n  if (entries.length === 0) {\n    return null;\n  }\n  return entries.map(function (_ref5) {\n    var _nameAliases$key;\n    var _ref6 = _slicedToArray(_ref5, 2),\n      key = _ref6[0],\n      value = _ref6[1];\n    return `${(_nameAliases$key = nameAliases[key]) != null ? _nameAliases$key : kebabizeCamelCase(key)}: ${value}`;\n  }).join('; ');\n};\nexport function createStyleBuilder(config) {\n  var buildHandler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultStyleBuildHandler;\n  return new StyleBuilderImpl(config, buildHandler);\n}\nexport function createRuleBuilder(config, buildHandler) {\n  return new RuleBuilderImpl(config, buildHandler);\n}","map":{"version":3,"names":["_possibleConstructorReturn","_getPrototypeOf","_inherits","_slicedToArray","_classCallCheck","_createClass","_callSuper","t","o","e","_isNativeReflectConstruct","Reflect","construct","constructor","apply","Boolean","prototype","valueOf","call","hasSuffix","hasProp","isConfigPropertyAlias","isDefined","isRecord","kebabizeCamelCase","hasValueProcessor","configValue","BuilderBase","config","processedProps","key","value","add","property","maybeAssignProp","String","as","customProcess","maybeAssignProps","properties","_this","Object","entries","forEach","_ref","_ref2","handleProcess","process","processedValue","StyleBuilderImpl","_BuilderBase2","buildHandler","_this2","ruleBuildersSet","Set","nameAliases","buildFrom","props","_this3","_ref3","_ref4","build","buildRuleBuilders","result","cleanup","isRuleBuilder","name","_this4","builder","clear","RuleBuilderImpl","_BuilderBase3","_this5","defaultStyleBuildHandler","length","map","_ref5","_nameAliases$key","_ref6","join","createStyleBuilder","arguments","undefined","createRuleBuilder"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-reanimated\\src\\css\\web\\style\\builderFactories.ts"],"sourcesContent":["'use strict';\n\nimport { hasSuffix } from '../../../common';\nimport type { AnyRecord } from '../../types';\nimport {\n  hasProp,\n  isConfigPropertyAlias,\n  isDefined,\n  isRecord,\n  kebabizeCamelCase,\n} from '../../utils';\nimport type {\n  AnyBuilderConfig,\n  RuleBuilder,\n  RuleBuilderConfig,\n  RuleBuildHandler,\n  StyleBuilder,\n  StyleBuilderConfig,\n  StyleBuildHandler,\n  ValueProcessor,\n} from './types';\n\nconst hasValueProcessor = (\n  configValue: unknown\n): configValue is { process: ValueProcessor<unknown> } =>\n  typeof configValue === 'object' &&\n  configValue !== null &&\n  'process' in configValue;\n\nabstract class BuilderBase<P extends AnyRecord, R> {\n  protected readonly config: AnyBuilderConfig<P>;\n\n  protected processedProps = {} as Record<keyof P, string>;\n\n  constructor(config: AnyBuilderConfig<P>) {\n    this.config = config;\n  }\n\n  add(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n\n    if (!configValue || !isDefined(value) || configValue === false) {\n      return;\n    }\n\n    if (configValue === true) {\n      this.maybeAssignProp(property, String(value));\n    } else if (typeof configValue === 'string') {\n      this.maybeAssignProp(\n        property,\n        hasSuffix(value) ? value : `${String(value)}${configValue}`\n      );\n    } else if (isConfigPropertyAlias<P>(configValue)) {\n      this.add(configValue.as, value);\n    } else {\n      this.customProcess(property, value);\n    }\n  }\n\n  abstract build(): R;\n\n  protected abstract customProcess(\n    _property: keyof P,\n    _value: P[keyof P]\n  ): void;\n\n  protected maybeAssignProp(property: keyof P, value: string) {\n    this.processedProps[property] ??= value;\n  }\n\n  protected maybeAssignProps(properties: Record<string, string>) {\n    Object.entries(properties).forEach(([key, value]) =>\n      this.maybeAssignProp(key, value)\n    );\n  }\n\n  protected handleProcess(\n    property: keyof P,\n    value: P[keyof P],\n    process: ValueProcessor<P[keyof P]>\n  ) {\n    const processedValue = process ? process(value) : String(value);\n\n    if (!isDefined(processedValue)) {\n      return;\n    }\n\n    if (isRecord(processedValue)) {\n      this.maybeAssignProps(processedValue);\n    } else {\n      this.maybeAssignProp(property, processedValue);\n    }\n  }\n}\n\nclass StyleBuilderImpl<P extends AnyRecord>\n  extends BuilderBase<P, string | null>\n  implements StyleBuilder<P>\n{\n  private readonly buildHandler: StyleBuildHandler<P>;\n\n  private ruleBuildersSet: Set<RuleBuilder<P>> = new Set();\n  private nameAliases = {} as Record<keyof P, string>;\n\n  constructor(\n    config: StyleBuilderConfig<P>,\n    buildHandler: StyleBuildHandler<P>\n  ) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n\n  buildFrom(props: P): string | null {\n    Object.entries(props).forEach(([key, value]) => this.add(key, value));\n    return this.build();\n  }\n\n  override build(): string | null {\n    this.buildRuleBuilders();\n    const result = this.buildHandler(this.processedProps, this.nameAliases);\n    this.cleanup();\n    return result;\n  }\n\n  protected override customProcess(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n\n    if (typeof configValue !== 'object') {\n      return;\n    }\n\n    if (isRuleBuilder<P>(configValue)) {\n      this.ruleBuildersSet.add(configValue);\n      configValue.add(property, value);\n    } else {\n      if (hasValueProcessor(configValue)) {\n        this.handleProcess(property, value, configValue.process);\n      } else {\n        this.maybeAssignProp(property, String(value));\n      }\n\n      if (hasProp(configValue, 'name')) {\n        this.nameAliases[property] = configValue.name;\n      }\n    }\n  }\n\n  private buildRuleBuilders() {\n    // Build props which are created from other style properties\n    this.ruleBuildersSet.forEach((builder) =>\n      this.maybeAssignProps(builder.build())\n    );\n    this.ruleBuildersSet.clear();\n  }\n\n  private cleanup() {\n    this.processedProps = {} as Record<keyof P, string>;\n    this.nameAliases = {} as Record<keyof P, string>;\n  }\n}\n\nclass RuleBuilderImpl<P extends AnyRecord>\n  extends BuilderBase<P, Record<string, string>>\n  implements RuleBuilder<P>\n{\n  private readonly buildHandler: RuleBuildHandler<P>;\n\n  constructor(config: RuleBuilderConfig<P>, buildHandler: RuleBuildHandler<P>) {\n    super(config);\n    this.buildHandler = buildHandler;\n  }\n\n  override build(): Record<string, string> {\n    const result = this.buildHandler(this.processedProps);\n    this.cleanup();\n    return result;\n  }\n\n  protected override customProcess(property: keyof P, value: P[keyof P]) {\n    const configValue = this.config[property];\n    if (hasValueProcessor(configValue)) {\n      this.handleProcess(property, value, configValue.process);\n    }\n  }\n\n  private cleanup() {\n    this.processedProps = {} as Record<keyof P, string>;\n  }\n}\n\nconst isRuleBuilder = <P extends AnyRecord>(\n  value: unknown\n): value is RuleBuilder<P> => value instanceof RuleBuilderImpl;\n\nconst defaultStyleBuildHandler: StyleBuildHandler<AnyRecord> = (\n  props,\n  nameAliases\n) => {\n  const entries = Object.entries(props);\n\n  if (entries.length === 0) {\n    return null;\n  }\n\n  return entries\n    .map(\n      ([key, value]) =>\n        `${nameAliases[key] ?? kebabizeCamelCase(key)}: ${value}`\n    )\n    .join('; ');\n};\n\nexport function createStyleBuilder<P extends AnyRecord>(\n  config: StyleBuilderConfig<P>,\n  buildHandler: StyleBuildHandler<P> = defaultStyleBuildHandler\n): StyleBuilder<Partial<P>> {\n  return new StyleBuilderImpl(config, buildHandler);\n}\n\nexport function createRuleBuilder<P extends AnyRecord>(\n  config: RuleBuilderConfig<P>,\n  buildHandler: RuleBuildHandler<P>\n): RuleBuilder<Partial<P>> {\n  return new RuleBuilderImpl(config, buildHandler);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
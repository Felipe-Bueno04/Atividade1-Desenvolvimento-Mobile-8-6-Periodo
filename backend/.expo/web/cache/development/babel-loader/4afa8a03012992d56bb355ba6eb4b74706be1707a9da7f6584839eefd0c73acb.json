{"ast":null,"code":"'use strict';\n\nimport { useCallback, useEffect, useRef } from 'react';\nimport { IS_WEB, logger } from \"../common\";\nimport { useEvent } from \"./useEvent\";\nimport { useSharedValue } from \"./useSharedValue\";\nvar NOT_INITIALIZED_WARNING = 'animatedRef is not initialized in useScrollOffset. Make sure to pass the animated ref to the scrollable component to get scroll offset updates.';\nvar NATIVE_SCROLL_EVENT_NAMES = ['onScroll', 'onScrollBeginDrag', 'onScrollEndDrag', 'onMomentumScrollBegin', 'onMomentumScrollEnd'];\nexport var useScrollOffset = IS_WEB ? useScrollOffsetWeb : useScrollOffsetNative;\nfunction useScrollOffsetWeb(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useCallback(function () {\n    'worklet';\n\n    if (animatedRef != null && animatedRef.current) {\n      var element = getWebScrollableElement(animatedRef.current);\n      offset.value = element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n  }, [animatedRef, offset]);\n  useEffect(function () {\n    if (!animatedRef) {\n      return;\n    }\n    return animatedRef.observe(function (tag) {\n      if (!animatedRef.current || !tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n      var element = getWebScrollableElement(animatedRef.current);\n      element.addEventListener('scroll', eventHandler);\n      return function () {\n        element.removeEventListener('scroll', eventHandler);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n  return offset;\n}\nfunction useScrollOffsetNative(animatedRef, providedOffset) {\n  var internalOffset = useSharedValue(0);\n  var offset = useRef(providedOffset != null ? providedOffset : internalOffset).current;\n  var eventHandler = useEvent(function (event) {\n    'worklet';\n\n    offset.value = event.contentOffset.x === 0 ? event.contentOffset.y : event.contentOffset.x;\n  }, NATIVE_SCROLL_EVENT_NAMES);\n  useEffect(function () {\n    if (!animatedRef) {\n      return;\n    }\n    return animatedRef.observe(function (tag) {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n      eventHandler.workletEventHandler.registerForEvents(tag);\n      return function () {\n        eventHandler.workletEventHandler.unregisterFromEvents(tag);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n  return offset;\n}\nfunction getWebScrollableElement(scrollComponent) {\n  var _scrollComponent$getS;\n  return (_scrollComponent$getS = scrollComponent == null ? void 0 : scrollComponent.getScrollableNode == null ? void 0 : scrollComponent.getScrollableNode()) != null ? _scrollComponent$getS : scrollComponent;\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","IS_WEB","logger","useEvent","useSharedValue","NOT_INITIALIZED_WARNING","NATIVE_SCROLL_EVENT_NAMES","useScrollOffset","useScrollOffsetWeb","useScrollOffsetNative","animatedRef","providedOffset","internalOffset","offset","current","eventHandler","element","getWebScrollableElement","value","scrollLeft","scrollTop","observe","tag","warn","addEventListener","removeEventListener","event","contentOffset","x","y","workletEventHandler","registerForEvents","unregisterFromEvents","scrollComponent","_scrollComponent$getS","getScrollableNode"],"sources":["C:\\Users\\User\\Desktop\\Atividade1-Desenvolvimento-Mobile-8-6--Periodo\\backend\\node_modules\\react-native-reanimated\\src\\hook\\useScrollOffset.ts"],"sourcesContent":["'use strict';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { IS_WEB, logger } from '../common';\nimport type { SharedValue, WrapperRef } from '../commonTypes';\nimport type {\n  AnimatedRef,\n  ReanimatedScrollEvent,\n  RNNativeScrollEvent,\n} from './commonTypes';\nimport type { EventHandlerInternal } from './useEvent';\nimport { useEvent } from './useEvent';\nimport { useSharedValue } from './useSharedValue';\n\nconst NOT_INITIALIZED_WARNING =\n  'animatedRef is not initialized in useScrollOffset. Make sure to pass the animated ref to the scrollable component to get scroll offset updates.';\n\nconst NATIVE_SCROLL_EVENT_NAMES = [\n  'onScroll',\n  'onScrollBeginDrag',\n  'onScrollEndDrag',\n  'onMomentumScrollBegin',\n  'onMomentumScrollEnd',\n] as const;\n\n/**\n * Lets you synchronously get the current offset of a scrollable component.\n *\n * @param animatedRef - An [animated\n *   ref](https://docs.swmansion.com/react-native-reanimated/docs/core/useAnimatedRef)\n *   attached to a scrollable component.\n * @returns A shared value which holds the current scroll offset of the\n *   scrollable component.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/scroll/useScrollOffset\n */\nexport const useScrollOffset = IS_WEB\n  ? useScrollOffsetWeb\n  : useScrollOffsetNative;\n\nfunction useScrollOffsetWeb<TRef extends WrapperRef>(\n  animatedRef: AnimatedRef<TRef> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useCallback(() => {\n    'worklet';\n    if (animatedRef?.current) {\n      const element = getWebScrollableElement(animatedRef.current);\n      // scrollLeft is the X axis scrolled offset, works properly also with RTL layout\n      offset.value =\n        element.scrollLeft === 0 ? element.scrollTop : element.scrollLeft;\n    }\n  }, [animatedRef, offset]);\n\n  useEffect(() => {\n    if (!animatedRef) {\n      return;\n    }\n\n    return animatedRef.observe((tag) => {\n      if (!animatedRef.current || !tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n\n      const element = getWebScrollableElement(animatedRef.current);\n      element.addEventListener('scroll', eventHandler);\n\n      return () => {\n        element.removeEventListener('scroll', eventHandler);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n\n  return offset;\n}\n\nfunction useScrollOffsetNative<TRef extends WrapperRef>(\n  animatedRef: AnimatedRef<TRef> | null,\n  providedOffset?: SharedValue<number>\n): SharedValue<number> {\n  const internalOffset = useSharedValue(0);\n  const offset = useRef(providedOffset ?? internalOffset).current;\n\n  const eventHandler = useEvent<RNNativeScrollEvent>(\n    (event: ReanimatedScrollEvent) => {\n      'worklet';\n      offset.value =\n        event.contentOffset.x === 0\n          ? event.contentOffset.y\n          : event.contentOffset.x;\n    },\n    NATIVE_SCROLL_EVENT_NAMES\n    // Read https://github.com/software-mansion/react-native-reanimated/pull/5056\n    // for more information about this cast.\n  ) as unknown as EventHandlerInternal<ReanimatedScrollEvent>;\n\n  useEffect(() => {\n    if (!animatedRef) {\n      return;\n    }\n\n    return animatedRef.observe((tag) => {\n      if (!tag) {\n        logger.warn(NOT_INITIALIZED_WARNING);\n        return;\n      }\n\n      eventHandler.workletEventHandler.registerForEvents(tag);\n      return () => {\n        eventHandler.workletEventHandler.unregisterFromEvents(tag);\n      };\n    });\n  }, [animatedRef, eventHandler]);\n\n  return offset;\n}\n\nfunction getWebScrollableElement(scrollComponent: WrapperRef): HTMLElement {\n  return scrollComponent?.getScrollableNode?.() ?? scrollComponent;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}